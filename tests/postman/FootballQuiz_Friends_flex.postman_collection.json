{
  "info": {
    "_postman_id": "14e479c9-c675-4b95-9500-09bf6272d6d8",
    "name": "FootballQuiz Friends Test (flex)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Register A",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "auth",
                "register"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userAEmail}}\",\n  \"password\": \"{{passwordA}}\",\n  \"nickname\": \"{{nicknameA}}\",\n  \"avatarUrl\": \"{{avatarA}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 201\", () => pm.response.to.have.status(201));"
                ]
              }
            }
          ]
        },
        {
          "name": "Register B",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "auth",
                "register"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userBEmail}}\",\n  \"password\": \"{{passwordB}}\",\n  \"nickname\": \"{{nicknameB}}\",\n  \"avatarUrl\": \"{{avatarB}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 201\", () => pm.response.to.have.status(201));"
                ]
              }
            }
          ]
        },
        {
          "name": "Login A",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "auth",
                "login"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{ \"email\":\"{{userAEmail}}\", \"password\":\"{{passwordA}}\"}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 200\", function () { pm.response.to.have.status(200); });\nconst json = pm.response.json ? pm.response.json() : {};\n// Try multiple common shapes\nlet token = json.accessToken || json.token || json.access_token\n          || (json.tokens && (json.tokens.accessToken || (json.tokens.access && json.tokens.access.token)))\n          || (json.data && (json.data.accessToken || json.data.token))\n          || (json.auth && (json.auth.accessToken || json.auth.token));\npm.expect(token, \"No access token found in response\").to.be.a(\"string\");\npm.environment.set(\"tokenA\", token);\n\n// Save user id if available\nconst user = json.user || (json.data && json.data.user) || (json.profile);\nif (user && (user.id || user.userId)) {\n  const uid = (user.id || user.userId).toString();\n  pm.environment.set(\"userAId\", uid);\n}"
                ]
              }
            }
          ]
        },
        {
          "name": "Login B",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "auth",
                "login"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{ \"email\":\"{{userBEmail}}\", \"password\":\"{{passwordB}}\"}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 200\", function () { pm.response.to.have.status(200); });\nconst json = pm.response.json ? pm.response.json() : {};\n// Try multiple common shapes\nlet token = json.accessToken || json.token || json.access_token\n          || (json.tokens && (json.tokens.accessToken || (json.tokens.access && json.tokens.access.token)))\n          || (json.data && (json.data.accessToken || json.data.token))\n          || (json.auth && (json.auth.accessToken || json.auth.token));\npm.expect(token, \"No access token found in response\").to.be.a(\"string\");\npm.environment.set(\"tokenB\", token);\n\n// Save user id if available\nconst user = json.user || (json.data && json.data.user) || (json.profile);\nif (user && (user.id || user.userId)) {\n  const uid = (user.id || user.userId).toString();\n  pm.environment.set(\"userBId\", uid);\n}"
                ]
              }
            }
          ]
        },
        {
          "name": "Me (A)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{tokenA}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "auth",
                "me"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 200\", () => pm.response.to.have.status(200));"
                ]
              }
            }
          ]
        },
        {
          "name": "Me (B)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{tokenB}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "auth",
                "me"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 200\", () => pm.response.to.have.status(200));"
                ]
              }
            }
          ]
        },
        {
          "name": "Refresh A (uses HttpOnly cookie)",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/auth/refresh",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "auth",
                "refresh"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 200\", function () { pm.response.to.have.status(200); });\nconst json = pm.response.json ? pm.response.json() : {};\n// Try multiple common shapes\nlet token = json.accessToken || json.token || json.access_token\n          || (json.tokens && (json.tokens.accessToken || (json.tokens.access && json.tokens.access.token)))\n          || (json.data && (json.data.accessToken || json.data.token))\n          || (json.auth && (json.auth.accessToken || json.auth.token));\npm.expect(token, \"No access token found in response\").to.be.a(\"string\");\npm.environment.set(\"tokenA\", token);\n\n// Save user id if available\nconst user = json.user || (json.data && json.data.user) || (json.profile);\nif (user && (user.id || user.userId)) {\n  const uid = (user.id || user.userId).toString();\n  pm.environment.set(\"userAId\", uid);\n}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Friends",
      "item": [
        {
          "name": "Send friend request (A -> B)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{tokenA}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friends",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "friends"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"toUserId\": {{userBId}}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 201\", function () { pm.response.to.have.status(201); });",
                  "pm.environment.set(\"friendRequestId\", (pm.response.json().id||\"\").toString());"
                ]
              }
            }
          ]
        },
        {
          "name": "Outgoing requests (A)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{tokenA}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friends/requests?type=outgoing",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "friends",
                "requests"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "outgoing"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"200 or 404 (route optional)\", function () { pm.expect([200,404]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Incoming requests (B)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{tokenB}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friends/requests?type=incoming",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "friends",
                "requests"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "incoming"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"200 or 404 (route optional)\", function () { pm.expect([200,404]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Accept request (B)",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{tokenB}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friends/{{friendRequestId}}/accept",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "friends",
                "{{friendRequestId}}",
                "accept"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"200 or 404 if friendRequestId missing\", function () { pm.expect([200,404]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "List my friends (A)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{tokenA}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friends",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "friends"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 200\", () => pm.response.to.have.status(200));"
                ]
              }
            }
          ]
        },
        {
          "name": "Remove friend (A removes B)",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{tokenA}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friends/{{userBId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "friends",
                "{{userBId}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"204 or 404 if not friends\", function () { pm.expect([204,404]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Send duplicate request (expect 409)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{tokenA}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friends",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "friends"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"toUserId\": {{userBId}}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"409 or 400 for duplicate\", function () { pm.expect([409,400]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Reject request (B) — alt path",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{tokenB}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friends/{{friendRequestId}}/reject",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "friends",
                "{{friendRequestId}}",
                "reject"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"200 or 404 if friendRequestId missing\", function () { pm.expect([200,404]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Cancel pending (A)",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{tokenA}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friends/requests/{{friendRequestId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "friends",
                "requests",
                "{{friendRequestId}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"204/200 or 404 if not found\", function () { pm.expect([200,204,404]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Negative cases",
      "item": [
        {
          "name": "Send to self (expect 400)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{tokenA}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friends",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "friends"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"toUserId\": {{userAId}}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 400\", () => pm.response.to.have.status(400));"
                ]
              }
            }
          ]
        },
        {
          "name": "Without token (expect 401)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/friends",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "friends"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 401\", () => pm.response.to.have.status(401));"
                ]
              }
            }
          ]
        },
        {
          "name": "Invalid toUserId (expect 404 or 400)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{tokenA}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friends",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "friends"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"toUserId\": 999999\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 404/400/401 depending on auth\", function () { pm.expect([404,400,401]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}